/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.Stack.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author damian
 */
public class PanelPrincipal extends javax.swing.JFrame {
    static String[][] tablaPredictiva = new String[22][29];
    static String terminalArry[] = {
        "mientras",
        "hacer",
        "{",
        "leer",
        "escribir",
        "idL",
        "idN",
        "(",
        "<",
        ">",
        "<=",
        ">=",
        "==",
        "!=",
        "+",
        "-",
        "*",
        "/",
        "}",
        ")",
        ";",
        "'",
        "and",
        "or",
        "=",
        "entero",
        "entero2",
        "cadena",
        "$"
    };
    static String noTerminalArry[] = {
        "<REPETITIVA>",
        "<CUERPO>",
        "<INSTRUCCIONES>",
        "<CONDICIONAL>",
        "<EXPRESIONES>",
        "<VALOR>",
        "<RESTO>",
        "<RESTOD>",
        "<LETRA>",
        "<DIGITO>",
        "<OPERADOR>",
        "<OPCIONAL>",
        "<LOGICO>",
        "<ARITMETICO>",
        "<LEER>",
        "<ESCRIBIR>",
        "<ASIGNAR>",
        "<HEAD>",
        "<DECLARAR>",
        "<ID>",
        "<TIPODATO>",
        "<SALIDA>"
    };
    static String tipoToken, errorGeneral = " ", txtCliente;
    static boolean fatalErrol = false, banderaHacer = false, banderaMintras = false;

    static int posicionLineaCodigo = 0, fila, columna, posicionId = 0, numeroVarible = 0;
    static Stack < String > pilaCompilador = new Stack < > (); //pila
    static Stack < String > pilaSemantico = new Stack < > (); //pila
    static ArrayList < String > listaToken = new ArrayList < String > (); //almacena los token o lexemas para analizadorSintactico
    static ArrayList < String > listaVariables = new ArrayList < String > ();
    static ArrayList < String > listaTipoDato = new ArrayList < String > ();
    static ArrayList < String > listaId = new ArrayList < String > ();
    static ArrayList listaValor = new ArrayList();
       
        
    /**
     * Creates new form PanelPrincipal
     */
        
        
        NumeroLinea numeroLinea;
       
    public PanelPrincipal() {
        initComponents();
        numeroLinea = new NumeroLinea(jTextArea1);
        jScrollPane1.setRowHeaderView(numeroLinea);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ptCliente = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText(" Ejecutar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ptCliente.setEditable(false);
        ptCliente.setColumns(20);
        ptCliente.setRows(5);
        ptCliente.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(ptCliente);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("entero hola = 1 ;\nentero  comelon = 2 ;\nhacer {\n\tescribir ' hola mundo ' ;\n\thola = hola + 1 ;\nescribir hola ;\ncomelon = comelon * 2 ;\n\n} mientras ( hola < 5 ) ;\n\n");
        jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addGap(25, 25, 25))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(321, 321, 321)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(316, 316, 316))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        jButton1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            try {
                // TODO add your handling code here:
//        ptCliente.append("holamundo");
//        ptCliente.append(System.getProperty("line.separator"));
           
        ptCliente.setText("");
            ruta();
            CrearArchivo();
            
            limpiar();
            inicio();
            
            } catch (IOException ex) {
                Logger.getLogger(PanelPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
                     
        
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PanelPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PanelPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PanelPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PanelPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PanelPrincipal().setVisible(true);
            }
        });
    }
    
    
    private void limpiar(){
        
            listaVariables.clear();
            listaId.clear();
            listaTipoDato.clear();
            listaValor.clear();
            listaToken.clear();
            pilaCompilador.clear();
            pilaSemantico.clear();
            System.gc();
            System.runFinalization();
            System.gc();
            
           
    }
    private void ruta (){
        final String NOMBRE_ARCHIVO = "IngresarCadena.txt";
        Path rutaRelativa = Paths.get(NOMBRE_ARCHIVO);
        System.out.println("Ruta relativa " + rutaRelativa);
        Path rutaAbsoluta = rutaRelativa.toAbsolutePath();
        System.out.println("\nRuta absoluta " + rutaAbsoluta);
    }
    private void CrearArchivo() throws IOException{
        
            try (FileWriter perimite_escrito = new FileWriter("C:\\Users\\damian\\Desktop\\IngresarCadena.txt")) {
                String texto =jTextArea1.getText().replace("\n", "\r\n");
                PrintWriter imprime =new PrintWriter(perimite_escrito);
                imprime.print(texto);
            }
    }
    
    
    private void inicio() throws IOException {
                       //matriz
                    tablaPredictiva[0][0] = "mientras <CONDICIONAL> <CUERPO>";
                    tablaPredictiva[0][1] = "hacer <CUERPO> mientras <CONDICIONAL> ;";
                    tablaPredictiva[1][2] = "{ <INSTRUCCIONES> }";
                    tablaPredictiva[2][0] = "<REPETITIVA> <INSTRUCCIONES>";
                    tablaPredictiva[2][1] = "<REPETITIVA> <INSTRUCCIONES>";
                    tablaPredictiva[2][3] = "<LEER> <INSTRUCCIONES>";
                    tablaPredictiva[2][4] = "<ESCRIBIR> <INSTRUCCIONES>";
                    tablaPredictiva[2][5] = "<ASIGNAR> <INSTRUCCIONES>";
                    tablaPredictiva[2][18] = "°";
                    // tablaPredictiva[2][25] = "<DECLARAR> <INSTRUCCIONES>";
                    // tablaPredictiva[2][26] = "<DECLARAR> <INSTRUCCIONES>";
                    // tablaPredictiva[2][27] = "<DECLARAR> <INSTRUCCIONES>";
                    tablaPredictiva[3][7] = "( <EXPRESIONES> <OPCIONAL> )";
                    tablaPredictiva[4][5] = "<VALOR> <OPERADOR> <VALOR>";
                    tablaPredictiva[4][6] = "<VALOR> <OPERADOR> <VALOR>";
                    tablaPredictiva[5][5] = "<LETRA> <RESTO>";
                    tablaPredictiva[5][6] = "<DIGITO> <RESTOD>";
                    tablaPredictiva[6][5] = "<LETRA> <RESTO>";
                    tablaPredictiva[6][8] = "°";
                    tablaPredictiva[6][9] = "°";
                    tablaPredictiva[6][10] = "°";
                    tablaPredictiva[6][11] = "°";
                    tablaPredictiva[6][12] = "°";
                    tablaPredictiva[6][13] = "°";
                    tablaPredictiva[6][14] = "°";
                    tablaPredictiva[6][15] = "°";
                    tablaPredictiva[6][16] = "°";
                    tablaPredictiva[6][17] = "°";
                    tablaPredictiva[6][19] = "°";
                    tablaPredictiva[6][20] = "°";
                    tablaPredictiva[6][21] = "°";
                    tablaPredictiva[6][22] = "°";
                    tablaPredictiva[6][23] = "°";
                    tablaPredictiva[6][24] = "°";
                    tablaPredictiva[7][6] = "<DIGITO> <RESTOD>";
                    tablaPredictiva[7][8] = "°";
                    tablaPredictiva[7][9] = "°";
                    tablaPredictiva[7][10] = "°";
                    tablaPredictiva[7][11] = "°";
                    tablaPredictiva[7][12] = "°";
                    tablaPredictiva[7][13] = "°";
                    tablaPredictiva[7][14] = "°";
                    tablaPredictiva[7][15] = "°";
                    tablaPredictiva[7][16] = "°";
                    tablaPredictiva[7][17] = "°";
                    tablaPredictiva[7][19] = "°";
                    tablaPredictiva[7][20] = "°";
                    tablaPredictiva[7][21] = "°";
                    tablaPredictiva[7][22] = "°";
                    tablaPredictiva[7][23] = "°";
                    tablaPredictiva[7][24] = "°";
                    tablaPredictiva[8][5] = "idL";
                    tablaPredictiva[9][6] = "idN";
                    tablaPredictiva[10][8] = "<";
                    tablaPredictiva[10][9] = ">";
                    tablaPredictiva[10][10] = "<=";
                    tablaPredictiva[10][11] = ">=";
                    tablaPredictiva[10][12] = "==";
                    tablaPredictiva[10][13] = "!=";
                    tablaPredictiva[11][19] = "°";
                    tablaPredictiva[11][22] = "<LOGICO> <EXPRESIONES>";
                    tablaPredictiva[11][23] = "<LOGICO> <EXPRESIONES>";
                    tablaPredictiva[12][22] = "and";
                    tablaPredictiva[12][23] = "or";
                    tablaPredictiva[13][14] = "+";
                    tablaPredictiva[13][15] = "-";
                    tablaPredictiva[13][16] = "*";
                    tablaPredictiva[13][17] = "/";
                    tablaPredictiva[14][3] = "leer <LETRA> <RESTO> ;";
                    tablaPredictiva[15][4] = "escribir <SALIDA> ;";
                    tablaPredictiva[16][5] = "<LETRA> <RESTO> = <VALOR> <ARITMETICO> <VALOR> ;";
                    tablaPredictiva[17][25] = "<DECLARAR> <REPETITIVA>";
                    tablaPredictiva[17][26] = "<DECLARAR> <REPETITIVA>";
                    tablaPredictiva[17][27] = "<DECLARAR> <REPETITIVA>";
                    tablaPredictiva[18][0] = "°";
                    tablaPredictiva[18][1] = "°";
                    tablaPredictiva[18][25] = "<ID> <DECLARAR>";
                    tablaPredictiva[18][26] = "<ID> <DECLARAR>";
                    tablaPredictiva[18][27] = "<ID> <DECLARAR>";
                    tablaPredictiva[19][25] = "<TIPODATO> <LETRA> <RESTO> = <DIGITO> <RESTOD> ;";
                    tablaPredictiva[19][26] = "<TIPODATO> <LETRA> <RESTO> = <DIGITO> <RESTOD> ;";
                    tablaPredictiva[19][27] = "<TIPODATO> <LETRA> <RESTO> = <DIGITO> <RESTOD> ;";
                    tablaPredictiva[20][25] = "entero";
                    tablaPredictiva[20][26] = "entero2";
                    tablaPredictiva[20][27] = "cadena";
                    tablaPredictiva[21][21] = "' <VALOR> '";
                    tablaPredictiva[21][5] = "<LETRA> <RESTO>";
                    tablaPredictiva[21][6] = "<DIGITO> <RESTOD>";
                    

            int numeroLinea=1;
            //listaVariables.add("$");
            // lienascadenatxt = obtiene la liena del txt.
            //tokenPrincipal = token o lexema que pasara a ser evaluado por el sintacitco
            //tokenTxt = obtiene los token o lexemas de la lina que se va evaluar. por medio del metodo "StringTokenizer"
            //txt = obtiene el resualtodo del analizadorLexico por cada token o lexema
            String lineaCadenaTxt, tope,txt, tokenPrincipal[], auxTxt, cadenaSplit[];
            StringTokenizer tokenTxt;
            boolean bandera = false, finHead = false, varNew;
            FileReader leerArchivo = new FileReader("C:\\Users\\damian\\Desktop\\IngresarCadena.txt");
            BufferedReader b = new BufferedReader(leerArchivo);
           
           
            pilaCompilador.push("$");//agregando simbolo pila
            pilaCompilador.push("<HEAD>");// agregar primer termianl, simbolo inicial de la gramatica
             //Ciclo para obtener las lineas que se evaluaran en el analizador lexico   
                while(   (lineaCadenaTxt = b.readLine()) != null   ){
                        // System.out.println("Linea: " + numeroLinea);
                        // System.out.println("linea:"+lineaCadenaTxt);
                        tokenTxt = new StringTokenizer(lineaCadenaTxt);
                        cadenaSplit = lineaCadenaTxt.split(" ");
                        while (tokenTxt.hasMoreElements()) {//Ciclo para obtener token o lexema por cada linea evaualda
                            // System.out.println(tokenTxt.nextToken());
                            auxTxt = tokenTxt.nextToken();
                            txt = analizadorLexico(auxTxt);
                            if (txt != "ERROR") {
                                // System.out.println(txt);
                                tokenPrincipal = txt.split(" ");
                                listaToken.add(tokenPrincipal[0]);
                                listaVariables.add(tipoToken);       
                           }else{
                                bandera = true;
                                //System.out.println(txt + "ERRORLEXICO");
                                ptCliente.append(txt + "ERROR LEXICO");
                                ptCliente.append(System.getProperty("line.separator"));
//                                System.out.println("Error de Escritura. Linea: " + numeroLinea);
                                ptCliente.append("Error de Escritura. Linea: " + numeroLinea);
                                ptCliente.append(System.getProperty("line.separator"));
//                                System.out.println("    Palabra: " + "' " + auxTxt + " '");
                                ptCliente.append("    Palabra: " + "' " + auxTxt + " '");
                            }

                        }
                numeroLinea++;
                }
                b.close();
                    try {
                        if(bandera != true){
                            bandera = analizadorSintactico();
                        }
                        if (bandera != true) {
//                            System.out.println("** SALIDAD ** ");
                            ptCliente.append("** SALIDA ** ");
                            ptCliente.append(System.getProperty("line.separator"));
                            pilaSemantico.push("$");
                            llenarPilaSemantico();
                            sematico();
                        }
                    } catch (Exception e) {
//                        System.out.println("No hay Codigo Fuente. \n Ingrese Codigo Fuente.");
                            ptCliente.append("No hay Codigo Fuente. \n Ingrese Codigo Fuente.");
                            ptCliente.append(System.getProperty("line.separator"));
                        //TODO: handle exception
                    }
    }
    
    private String analizadorLexico(String lexema) {
        int posicionPalabra = 0;
        char[] analizarLexema = lexema.toCharArray();
        String idEntrada,tokenAS = "ERROR";//token Analisis sintactico, es el token que se debe evaluar para dicho analisis
        // System.out.println(lexema);

              if ( lexema.equals("mientras") || lexema.equals("hacer") || lexema.equals("leer") || lexema.equals("escribir") || lexema.equals("and") || lexema.equals("or") || lexema.equals("entero")) {
                tokenAS = lexema + " PalabraReservadad";
                 tipoToken = lexema;
            }else{
                if( analizarLexema[posicionPalabra] >= 'a' && analizarLexema[posicionPalabra] <= 'z' || analizarLexema[posicionPalabra] >= 'A' && analizarLexema[posicionPalabra] <= 'Z' ){
                    posicionPalabra++;
                    tokenAS = "idL " + lexema;
                    // tipoToken = lexema;
                    while (posicionPalabra < analizarLexema.length) {
                        if(analizarLexema[posicionPalabra] >= 'a' && analizarLexema[posicionPalabra] <= 'z' || analizarLexema[posicionPalabra] >= 'A' && analizarLexema[posicionPalabra] <= 'Z'){
                            posicionPalabra++;
                            tokenAS = "idL " + lexema;
                            // tipoToken = "Variable";
                        }else{
                            posicionPalabra = analizarLexema.length + 1;
                            tokenAS = "ERROR";
                        }
                       
                        //addVariable(tipoToken);
                          
                        //listaVariables.add(lexema + "lex");
                    }
                    tipoToken = lexema;
                }else if( analizarLexema[posicionPalabra] >= '0' && analizarLexema[posicionPalabra] <= '9' ){
                    posicionPalabra++;
                    tokenAS = "idN " + lexema;
                    // tipoToken = "Variable";
                    while (posicionPalabra < analizarLexema.length) {
                        if(analizarLexema[posicionPalabra] >= '0' && analizarLexema[posicionPalabra] <= '9'){
                            posicionPalabra++;
                            tokenAS = "idN " + lexema;
                            // tipoToken = "Variable";
                        }else{
                            tokenAS = "ERROR";
                            posicionPalabra = analizarLexema.length + 1;
                        }
                    }
                    tipoToken = lexema;
                }else{
                    tokenAS = "ERROR";
                }
                
            }

            if( lexema.equals("<") || lexema.equals(">") || lexema.equals(">=") || lexema.equals("==") || lexema.equals("!=") || lexema.equals("<=") ){//racionales
                tokenAS = lexema + " OperadorRelacional";
                // tipoToken = "OperadorRelacional";
                tipoToken = lexema;
            }else if(lexema.equals("+")|| lexema.equals("-") || lexema.equals("/") || lexema.equals("*") || lexema.equals("=") ){//aritmeticos
                tokenAS = lexema + " OperadorAritmetico";
                // tipoToken = "OperadorAritmetico";
                tipoToken = lexema;
            }else if ( lexema.equals("(") || lexema.equals(")") || lexema.equals("{") || lexema.equals("}") || lexema.equals(";") || lexema.equals("'")){
                tokenAS = lexema + " Delimitadores";
                // tipoToken = "Delimitadores";
                tipoToken = lexema;
            }
           
        return tokenAS;
    }

    private boolean analizadorSintactico(){
        String tope, token;
        boolean bandera = false;
        int posicionListaToken = 0, linea = 1;
        while (pilaCompilador.peek() != "$" && bandera != true ){
            tope = pilaCompilador.peek();
            token = listaToken.get(posicionListaToken);
                        // System.out.println("TopePila: " + tope);//descomentar para ver lo que hay en tope pila
                        // System.out.println("listaToken: " + token);//descomentar para ver el token que se esta evaluando
            if( tope.equals(token) ){
                posicionListaToken++;
                // System.out.println("Comparacion: " + pilaCompilador.pop());
                // pilaCompilador.pop();
                    if (pilaCompilador.pop().equals(";")) {
                        linea++;
                    }
            }else{
                fila = conjuntoNoTerminal(tope);
                columna = conjuntoTerminal(token);
                    // System.out.println("Tabla posicion: " + fila + " <---> " + columna);
                try {
                    if (tablaPredictiva[fila][columna].equals("°")) {
                        // System.out.println(pilaCompilador.pop());
                        pilaCompilador.pop();
                    }else{
                        llenarPila();
                    }
                } catch (Exception e) {
                     bandera = true;
//                     System.out.println("Linea : " + (linea+1) );
                     ptCliente.append("Linea : " + (linea));
                     ptCliente.append(System.getProperty("line.separator"));
                    //TODO: handle exception
                }
            }

            
        }
        
        if (bandera != true) {
//            System.out.println("Compilacion Exitosa");
            ptCliente.append("Compilacion Exitosa");
            ptCliente.append(System.getProperty("line.separator"));
            return bandera;
        }else{
//            System.out.println("ERROR DE SINTAXIS");
            ptCliente.append("ERROR DE SINTAXIS");
            ptCliente.append(System.getProperty("line.separator"));
            if (linea == 1) {
//                System.out.println("No hay Variables Declardas \n Ingrese Variables.");
                  ptCliente.append("No hay Variables Declardas \n Ingrese Variables.");
                  ptCliente.append(System.getProperty("line.separator"));  
            }
            bandera = true;
        }

     return bandera;   
    }

    private int conjuntoTerminal(String lineaCodigo){
        // System.out.println("fCT"+ lineaCodigo + tope);
        for (int i = 0; i < terminalArry.length; i++) {
            if (lineaCodigo.equals(terminalArry[i])) {
                columna = i; 
            }
        }
        // System.out.println(columna);
        return columna;
    }

    private int conjuntoNoTerminal(String tope) {
        for (int i = 0; i < noTerminalArry.length; i++) {
            if (tope.equals(noTerminalArry[i])) {
               fila = i;
            }
        }
        // System.out.println(fila);
        return fila;
    }

    private void llenarPila() {
        String pilaPushNT[] = tablaPredictiva[fila][columna].split(" ");
        // System.out.println("FLLP" + tablaPredictiva[fila][columna]);
            pilaCompilador.pop();
            for (int i = pilaPushNT.length - 1; i >= 0; i--) {
            pilaCompilador.push(pilaPushNT[i]);
            }
    }

    private static void llenarPilaSemantico(){
        for (int i = listaVariables.size() - 1; i >= 0; i--) {
        pilaSemantico.push(listaVariables.get(i));
        }
    }

    private static boolean buscarVariable(String variable, int nM) {
        boolean bandera = false;
        posicionId = 0;
        if(nM == 1){
            for (String var : listaId) {
                if (variable.equals(var)) {
                    errorGeneral = "Variable ya fue declarada";
                    return bandera = true;
                }
            }
            listaId.add(variable);
        }else{
            for (String var : listaId) {
                if (variable.equals(var)) {
                   return bandera = true;
                }
                posicionId++;
            }
        }
    return false;
    }

    private void sematico() {
        
                           
        boolean bandera = false; //banderaHacer = false, banderaMintras = false;
        String lexemaAux,auxTmp;
            lexemaAux = declarId();
             
            if (fatalErrol == true){
//                System.out.println(errorGeneral);//terminar compilacion
                ptCliente.append(errorGeneral);
                ptCliente.append(System.getProperty("line.separator"));
            }else{
                switch (lexemaAux) {
                    case "mientras":
                        banderaMintras = condicionCiclo();
//                         System.out.println(banderaMintras);
                        try {
                            while (banderaMintras != true) {
                                programaCuerpo();
                                auxTmp = pilaSemantico.peek();
                                //System.out.println("1--asdfsd " + auxTmp);
                                //auxTmp = pilaSemantico.peek();
                                // System.out.println("2--asdfsd " + auxTmp);
                                if (auxTmp.equals("$")) {
                                    llenarPilaSemantico();
                                    for (int i = 0; i < numeroVarible; i++) {
                                        pilaSemantico.pop();
                                    }
                                }
                                banderaMintras = condicionCiclo();
                            }
                        } catch (Exception e) {
//                            System.out.println("Corriga los Erros.");
                             ptCliente.append("Corriga los Erros.");
                             ptCliente.append(System.getProperty("line.separator"));
                            //TODO: handle exception
                        }

                    break;
                    case "hacer" :
                        try {
                            while (banderaHacer != true) {
                            
                                programaCuerpo();
                                banderaHacer = condicionCiclo();
                                //System.out.println("banderaHacer = " + banderaHacer);
                                auxTmp = pilaSemantico.pop();
//                                System.out.println("sdfadsñlkfjñaldkj 23" + auxTmp);
                                auxTmp = pilaSemantico.peek();
//                                System.out.println("sdfadsñlkfjñaldkj " + auxTmp);
                                if ( auxTmp.equals("$") ) {
                                    llenarPilaSemantico();
//                                    System.out.println(pilaSemantico.peek());
                                    for (int i = 0; i < numeroVarible; i++) {
                                        pilaSemantico.pop();
                                    }
                                    pilaSemantico.pop();
                                }
                            }
                        } catch (Exception e) {
//                            System.out.println("Corriga los Erros.");
                             ptCliente.append("Corriga los Erros.");
                             ptCliente.append(System.getProperty("line.separator"));
                            //TODO: handle exception
                        }
                    break;

                    default:
                        break;
                }
            }
            
        

    }

    private static boolean condicionCiclo() {
        String aux, opL="", opR="", opR2="", auxTipo;
        int i = 0, posicionVar,valor1 = 0 , valor2 = 0, valor3 = 0, valor4 = 0;
        boolean variable, bandera = false;
            auxTipo = pilaSemantico.pop();
            if (auxTipo.equals("mientras")) {//elimiar mientras
                pilaSemantico.pop();//elimiar (
                aux = pilaSemantico.peek();
                    while (!aux.equals(")")) {
                        switch (i) {
                            case 0:
                                variable = buscarVariable(aux,2);
                                if (variable == true) {
                                    posicionVar = posicionId;
                                   valor1 = (int)listaValor.get(posicionVar);
                                   pilaSemantico.pop();//eliminar var1
                                }else{
                                    valor1 = Integer.parseInt(pilaSemantico.pop());//eliminar valor1
                                }
                            break;
                            case 1:
                                opR = pilaSemantico.pop();//eliminar opR
                            break;
                            case 2:
                                variable = buscarVariable(aux,2);
                                if (variable == true) {
                                    posicionVar = posicionId;
                                   valor2 = (int)listaValor.get(posicionVar);
                                   pilaSemantico.pop();//eliminar var2
                                }else{
                                    valor2 = Integer.parseInt(pilaSemantico.pop());//eliminar valor2
                                }
                            break;
                            case 3:
                                opL = pilaSemantico.pop();//eliminar opL
                            break;
                            case 4:
                                variable = buscarVariable(aux,2);
                                if (variable == true) {
                                    posicionVar = posicionId;
                                   valor3 = (int)listaValor.get(posicionVar);
                                   pilaSemantico.pop();//eliminar var3
                                }else{
                                    valor3 = Integer.parseInt(pilaSemantico.pop());//eliminar valor3
                                }
                            break;
                            case 5:
                                opR2 = pilaSemantico.pop();//eliminar opR
                            break;
                            case 6:
                             variable = buscarVariable(aux,2);
                                if (variable == true) {
                                    posicionVar = posicionId;
                                   valor4 = (int)listaValor.get(posicionVar);
                                   pilaSemantico.pop();//eliminar var4
                                }else{
                                    valor4 = Integer.parseInt(pilaSemantico.pop());//eliminar valor4
                                }
                            break; 
                            default:
                                break;
                        }
                        i++;
                        aux = pilaSemantico.peek();
                    }
                        pilaSemantico.pop();//eliminar )
                        if (i >= 6) {
                           bandera = cambiarBanderaLogico(valor1,opR,valor2,opL,valor3,opR2,valor4);
                        } else if(i >= 2) {
                            bandera = cambiarBandera(valor1,opR,valor2);
                        }
            }else if( auxTipo.equals("(") ){
                aux = pilaSemantico.peek();
                    while (!aux.equals(")")) {
                        switch (i) {
                            case 0:
                                variable = buscarVariable(aux,2);
                                if (variable == true) {
                                    posicionVar = posicionId;
                                   valor1 = (int)listaValor.get(posicionVar);
                                   pilaSemantico.pop();//eliminar var1
                                }else{
                                    valor1 = Integer.parseInt(pilaSemantico.pop());//eliminar valor1
                                }
                            break;
                            case 1:
                                opR = pilaSemantico.pop();//eliminar opR
                            break;
                            case 2:
                                variable = buscarVariable(aux,2);
                                if (variable == true) {
                                    posicionVar = posicionId;
                                   valor2 = (int)listaValor.get(posicionVar);
                                   pilaSemantico.pop();//eliminar var2
                                }else{
                                    valor2 = Integer.parseInt(pilaSemantico.pop());//eliminar valor2
                                }
                            break;
                            case 3:
                                opL = pilaSemantico.pop();//eliminar opL
                            break;
                            case 4:
                                variable = buscarVariable(aux,2);
                                if (variable == true) {
                                    posicionVar = posicionId;
                                   valor3 = (int)listaValor.get(posicionVar);
                                   pilaSemantico.pop();//eliminar var3
                                }else{
                                    valor3 = Integer.parseInt(pilaSemantico.pop());//eliminar valor3
                                }
                            break;
                            case 5:
                                opR2 = pilaSemantico.pop();//eliminar opR
                            break;
                            case 6:
                             variable = buscarVariable(aux,2);
                                if (variable == true) {
                                    posicionVar = posicionId;
                                   valor4 = (int)listaValor.get(posicionVar);
                                   pilaSemantico.pop();//eliminar var4
                                }else{
                                    valor4 = Integer.parseInt(pilaSemantico.pop());//eliminar valor4
                                }
                            break; 
                            default:
                                break;
                        }
                        i++;
                        aux = pilaSemantico.peek();
                    }
                        pilaSemantico.pop();//eliminar )
                        if (i >= 6) {
                           bandera = cambiarBanderaLogico(valor1,opR,valor2,opL,valor3,opR2,valor4);
                        } else if(i >= 2) {
                            bandera = cambiarBandera(valor1,opR,valor2);
                        }
            }
        return bandera;
    }

    private static boolean cambiarBanderaLogico(int valor1, String opR, int valor2, String opL, int valor3, String opR2, int valor4) {

      
        boolean bandera = true;
        //    System.out.println("fin ciclo 1: " + valor1+ " " + opR + " " + valor2 + " " + opL + " " + valor3 + " " + opR2 + " " + valor4);

        switch (opL) {
            case "and":
                switch (opR) {
                    case "<":
                        switch (opR2) {
                            case "<":
                                if (valor1 < valor2 && valor3 < valor4)
                                    bandera = false;
                                break;
                            case ">":
                                if (valor1 < valor2 && valor3 > valor4)
                                    bandera = false;
                                break;
                            case "==":
                                if (valor1 < valor2 && valor3 == valor4)
                                    bandera = false;
                                break;
                            case ">=":
                                if (valor1 < valor2 && valor3 >= valor4)
                                    bandera = false;
                                break;
                            case "<=":
                                if (valor1 < valor2 && valor3 <= valor4)
                                    bandera = false;
                                break;
                            case "!=":
                                if (valor1 < valor2 && valor3 != valor4)
                                    bandera = false;
                                break;

                            default:
                                break;
                        }
                        break;

                    case ">":
                        switch (opR2) {
                            case "<":
                                if (valor1 > valor2 && valor3 < valor4)
                                    bandera = false;
                                break;
                            case ">":
                                if (valor1 > valor2 && valor3 > valor4)
                                    bandera = false;
                                break;
                            case "==":
                                if (valor1 > valor2 && valor3 == valor4)
                                    bandera = false;
                                break;
                            case ">=":
                                if (valor1 > valor2 && valor3 >= valor4)
                                    bandera = false;
                                break;
                            case "<=":
                                if (valor1 > valor2 && valor3 <= valor4)
                                    bandera = false;
                                break;
                            case "!=":
                                if (valor1 > valor2 && valor3 != valor4)
                                    bandera = false;
                                break;

                            default:
                                break;
                        }
                        break;
                    case "==":
                        switch (opR2) {
                            case "<":
                                if (valor1 == valor2 && valor3 < valor4)
                                    bandera = false;
                                break;
                            case ">":
                                if (valor1 == valor2 && valor3 > valor4)
                                    bandera = false;
                                break;
                            case "==":
                                if (valor1 == valor2 && valor3 == valor4)
                                    bandera = false;
                                break;
                            case ">=":
                                if (valor1 == valor2 && valor3 >= valor4)
                                    bandera = false;
                                break;
                            case "<=":
                                if (valor1 == valor2 && valor3 <= valor4)
                                    bandera = false;
                                break;
                            case "!=":
                                if (valor1 == valor2 && valor3 != valor4)
                                    bandera = false;
                                break;

                            default:
                                break;
                        }
                        break;
                    case ">=":
                        switch (opR2) {
                            case "<":
                                if (valor1 >= valor2 && valor3 < valor4)
                                    bandera = false;
                                break;
                            case ">":
                                if (valor1 >= valor2 && valor3 > valor4)
                                    bandera = false;
                                break;
                            case "==":
                                if (valor1 >= valor2 && valor3 == valor4)
                                    bandera = false;
                                break;
                            case ">=":
                                if (valor1 >= valor2 && valor3 >= valor4)
                                    bandera = false;
                                break;
                            case "<=":
                                if (valor1 >= valor2 && valor3 <= valor4)
                                    bandera = false;
                                break;
                            case "!=":
                                if (valor1 >= valor2 && valor3 != valor4)
                                    bandera = false;
                                break;

                            default:
                                break;
                        }
                        break;
                    case "<=":
                        switch (opR2) {
                            case "<":
                                if (valor1 <= valor2 && valor3 < valor4)
                                    bandera = false;
                                break;
                            case ">":
                                if (valor1 <= valor2 && valor3 > valor4)
                                    bandera = false;
                                break;
                            case "==":
                                if (valor1 <= valor2 && valor3 == valor4)
                                    bandera = false;
                                break;
                            case ">=":
                                if (valor1 <= valor2 && valor3 >= valor4)
                                    bandera = false;
                                break;
                            case "<=":
                                if (valor1 <= valor2 && valor3 <= valor4)
                                    bandera = false;
                                break;
                            case "!=":
                                if (valor1 <= valor2 && valor3 != valor4)
                                    bandera = false;
                                break;

                            default:
                                break;
                        }
                        break;
                    case "!=":
                        switch (opR2) {
                            case "<":
                                if (valor1 != valor2 && valor3 < valor4)
                                    bandera = false;
                                break;
                            case ">":
                                if (valor1 != valor2 && valor3 > valor4)
                                    bandera = false;
                                break;
                            case "==":
                                if (valor1 != valor2 && valor3 == valor4)
                                    bandera = false;
                                break;
                            case ">=":
                                if (valor1 != valor2 && valor3 >= valor4)
                                    bandera = false;
                                break;
                            case "<=":
                                if (valor1 != valor2 && valor3 <= valor4)
                                    bandera = false;
                                break;
                            case "!=":
                                if (valor1 != valor2 && valor3 != valor4)
                                    bandera = false;
                                break;

                            default:
                                break;
                        }
                        break;

                    default:
                        break;
                }
                break;
            case "or":
                switch (opR) {
                    case "<":
                        switch (opR2) {
                            case "<":
                                if (valor1 < valor2 || valor3 < valor4)
                                    bandera = false;
                                break;
                            case ">":
                                if (valor1 < valor2 || valor3 > valor4)
                                    bandera = false;
                                break;
                            case "==":
                                if (valor1 < valor2 || valor3 == valor4)
                                    bandera = false;
                                break;
                            case ">=":
                                if (valor1 < valor2 || valor3 >= valor4)
                                    bandera = false;
                                break;
                            case "<=":
                                if (valor1 < valor2 || valor3 <= valor4)
                                    bandera = false;
                                break;
                            case "!=":
                                if (valor1 < valor2 || valor3 != valor4)
                                    bandera = false;
                                break;

                            default:
                                break;
                        }
                        break;

                    case ">":
                        switch (opR2) {
                            case "<":
                                if (valor1 > valor2 || valor3 < valor4)
                                    bandera = false;
                                break;
                            case ">":
                                if (valor1 > valor2 || valor3 > valor4)
                                    bandera = false;
                                break;
                            case "==":
                                if (valor1 > valor2 || valor3 == valor4)
                                    bandera = false;
                                break;
                            case ">=":
                                if (valor1 > valor2 || valor3 >= valor4)
                                    bandera = false;
                                break;
                            case "<=":
                                if (valor1 > valor2 || valor3 <= valor4)
                                    bandera = false;
                                break;
                            case "!=":
                                if (valor1 > valor2 || valor3 != valor4)
                                    bandera = false;
                                break;

                            default:
                                break;
                        }
                        break;
                    case "==":
                        switch (opR2) {
                            case "<":
                                if (valor1 == valor2 || valor3 < valor4)
                                    bandera = false;
                                break;
                            case ">":
                                if (valor1 == valor2 || valor3 > valor4)
                                    bandera = false;
                                break;
                            case "==":
                                if (valor1 == valor2 || valor3 == valor4)
                                    bandera = false;
                                break;
                            case ">=":
                                if (valor1 == valor2 || valor3 >= valor4)
                                    bandera = false;
                                break;
                            case "<=":
                                if (valor1 == valor2 || valor3 <= valor4)
                                    bandera = false;
                                break;
                            case "!=":
                                if (valor1 == valor2 || valor3 != valor4)
                                    bandera = false;
                                break;

                            default:
                                break;
                        }
                        break;
                    case ">=":
                        switch (opR2) {
                            case "<":
                                if (valor1 >= valor2 || valor3 < valor4)
                                    bandera = false;
                                break;
                            case ">":
                                if (valor1 >= valor2 || valor3 > valor4)
                                    bandera = false;
                                break;
                            case "==":
                                if (valor1 >= valor2 || valor3 == valor4)
                                    bandera = false;
                                break;
                            case ">=":
                                if (valor1 >= valor2 || valor3 >= valor4)
                                    bandera = false;
                                break;
                            case "<=":
                                if (valor1 >= valor2 || valor3 <= valor4)
                                    bandera = false;
                                break;
                            case "!=":
                                if (valor1 >= valor2 || valor3 != valor4)
                                    bandera = false;
                                break;

                            default:
                                break;
                        }
                        break;
                    case "<=":
                        switch (opR2) {
                            case "<":
                                if (valor1 <= valor2 || valor3 < valor4)
                                    bandera = false;
                                break;
                            case ">":
                                if (valor1 <= valor2 || valor3 > valor4)
                                    bandera = false;
                                break;
                            case "==":
                                if (valor1 <= valor2 || valor3 == valor4)
                                    bandera = false;
                                break;
                            case ">=":
                                if (valor1 <= valor2 || valor3 >= valor4)
                                    bandera = false;
                                break;
                            case "<=":
                                if (valor1 <= valor2 || valor3 <= valor4)
                                    bandera = false;
                                break;
                            case "!=":
                                if (valor1 <= valor2 || valor3 != valor4)
                                    bandera = false;
                                break;

                            default:
                                break;
                        }
                        break;
                    case "!=":
                        switch (opR2) {
                            case "<":
                                if (valor1 != valor2 || valor3 < valor4)
                                    bandera = false;
                                break;
                            case ">":
                                if (valor1 != valor2 || valor3 > valor4)
                                    bandera = false;
                                break;
                            case "==":
                                if (valor1 != valor2 || valor3 == valor4)
                                    bandera = false;
                                break;
                            case ">=":
                                if (valor1 != valor2 || valor3 >= valor4)
                                    bandera = false;
                                break;
                            case "<=":
                                if (valor1 != valor2 || valor3 <= valor4)
                                    bandera = false;
                                break;
                            case "!=":
                                if (valor1 != valor2 || valor3 != valor4)
                                    bandera = false;
                                break;

                            default:
                                break;
                        }
                        break;

                    default:
                        break;
                }
                break;
            default:
                break;
        }
        return bandera;
    }

    private static boolean cambiarBandera(int valor1, String opR, int valor2) {
  boolean bandera = true;
        // System.out.println("fin ciclo 2: " + valor1 + opR + valor2);
        switch (opR) {
            case "<":
                if (valor1 < valor2)
                    bandera = false;
                break;
            case ">":
                if (valor1 > valor2)
                    bandera = false;
                break;
            case "==":
                if (valor1 == valor2)
                    bandera = false;
                break;
            case ">=":
                if (valor1 >= valor2)
                    bandera = false;
                break;
            case "<=":
                if (valor1 <= valor2)
                    bandera = false;
                break;
            case "!=":
                if (valor1 != valor2)
                    bandera = false;
                break;

            default:
                break;
        }
        return bandera;
    }

    private void programaCuerpo() {
        String lex;
        boolean variable;
        pilaSemantico.pop(); // eliminar {
        lex = pilaSemantico.peek();
        ptCliente.append(lex);
            while (!lex.equals("}") && banderaHacer != true && banderaMintras != true ) {
                switch (lex) {
                    case "escribir":
                        pilaSemantico.pop();//elimiar escribir
                        mostrarPantalla();
                    break;
                    case "leer" :
                        pilaSemantico.pop();//eliminar leer
                        leerEntrada();
                    break;

                    default:
                        // System.out.println(lex + " esta entra");
                        variable = buscarVariable(pilaSemantico.pop(),2);//eliminar variable, ASIGNAR valor
                        if (variable == true) {
                            asignacionValor();
                        }else{
//                            System.out.println("Variable no Declarada");//erro fatalErrol********
                            ptCliente.append("Variable no Declarada");
                            ptCliente.append(System.getProperty("line.separator"));
                            banderaHacer = true;
                            banderaMintras  = true;
                            break;
                        }
                    break;
                }
                lex = pilaSemantico.peek();
                // System.out.println("cuerpo +" + lex);
            }
            pilaSemantico.pop();//eliminar }
    }

  
    private void asignacionValor() {
        int valorVariable, valor1 = 0, valor2 = 0;
        float valorF1 = 0, valorF2 = 0;
        String operadorAritmetico = "", aux = "", valorS1 = "", valorS2 = "", auxTmp;
        valorVariable = posicionId;
        boolean variable;

        pilaSemantico.pop(); //eliminar =
        aux = pilaSemantico.peek();
        //System.out.println("?? " + aux);
        while (!aux.equals(";")) {
            switch (listaTipoDato.get(valorVariable)) {
                case "entero":
                    try {
                        variable = buscarVariable(aux, 2);
                        if (variable == true) {
                            valor1 = posicionId;
                            // System.out.println("posici: " + valor1);
                            if (listaTipoDato.get(valor1).equals("entero")) {
                                // System.out.println("25195");
                                valor1 = (int) listaValor.get(valor1);
                                // System.out.println("2519");
                                pilaSemantico.pop(); //eliminar valor1
                            } else {
                                //                                System.out.println("Tipo de Dato Incorrecto " + aux);//error fatalErrol
                                ptCliente.append("Tipo de Dato Incorrecto " + aux);
                                ptCliente.append(System.getProperty("line.separator"));
                                banderaHacer = true;
                                banderaMintras = true;
                            }
                        } else {
                            valor1 = Integer.parseInt(pilaSemantico.pop()); //eliminar valor1
                        }
                        operadorAritmetico = pilaSemantico.pop(); //elimiar operadorAritmetico;
                        aux = pilaSemantico.peek();
                        variable = buscarVariable(aux, 2);
                        if (variable == true) {
                            valor2 = posicionId;
                            if (listaTipoDato.get(valor2).equals("entero")) {
                                valor2 = (int) listaValor.get(valor2);
                                pilaSemantico.pop(); //eliminar valor2
                            } else {
                                //                                System.out.println("Tipo de Dato Incorrecto " + aux);//error fatalErrol
                                ptCliente.append("Tipo de Dato Incorrecto " + aux);
                                ptCliente.append(System.getProperty("line.separator"));
                                banderaHacer = true;
                                banderaMintras = true;
                            }
                        } else {
                            valor2 = Integer.parseInt(pilaSemantico.pop()); //eliminar valor2
                        }
                        asignarE(valorVariable, valor1, operadorAritmetico, valor2);
                    } catch (Exception e) {
                        //                           System.out.println("Variable no Declarada " + aux);//erro fatalErrol
                        ptCliente.append("Variable no Declarada " + aux);
                        ptCliente.append(System.getProperty("line.separator"));
                        //                           System.out.println("Tipo de Dato Incorrecto " + aux);
                        ptCliente.append("Tipo de Dato Incorrecto " + aux);
                        ptCliente.append(System.getProperty("line.separator"));
                        banderaHacer = true;
                        banderaMintras = true;
                        //TODO: handle exception
                    }
                    break;
                case "decimal":
                    try {
                        variable = buscarVariable(aux, 2);
                        if (variable == true) {
                            valor1 = posicionId;
                            if (listaTipoDato.get(valor1).equals("entero2")) {
                                valorF1 = (float) listaValor.get(valor1);
                                pilaSemantico.pop(); //eliminar valor1
                            } else {
                                //                                    System.out.println("Tipo de Dato Incorrecto " + aux);//error fatalErrol
                                ptCliente.append("Tipo de Dato Incorrecto " + aux);
                                ptCliente.append(System.getProperty("line.separator"));
                                banderaHacer = true;
                                banderaMintras = true;
                            }
                        } else {
                            valorF1 = Float.parseFloat(pilaSemantico.pop()); //eliminar valor1
                        }
                        operadorAritmetico = pilaSemantico.pop(); //elimiar operadorAritmetico;
                        aux = pilaSemantico.peek();
                        variable = buscarVariable(aux, 2);
                        if (variable == true) {
                            valor2 = posicionId;
                            if (listaTipoDato.get(valor2).equals("entero")) {
                                valorF2 = (float) listaValor.get(valor2);
                                pilaSemantico.pop(); //eliminar valor2
                            } else {
                                //                                    System.out.println("Tipo de Dato Incorrecto " + aux);//error fatalErrol
                                ptCliente.append("Tipo de Dato Incorrecto " + aux);
                                ptCliente.append(System.getProperty("line.separator"));
                                banderaHacer = true;
                                banderaMintras = true;
                            }
                        } else {
                            valorF2 = Float.parseFloat(pilaSemantico.pop()); //eliminar valor2
                        }
                        asignarF(valorVariable, valorF1, operadorAritmetico, valorF2);
                    } catch (Exception e) {
                        //                            System.out.println("Variable no Declarada " + aux);//fatalErrol
                        ptCliente.append("Variable no Declarada " + aux);
                        ptCliente.append(System.getProperty("line.separator"));
                        //                            System.out.println("Tipo de Dato Incorrecto " + aux);
                        ptCliente.append("Tipo de Dato Incorrecto " + aux);
                        ptCliente.append(System.getProperty("line.separator"));
                        banderaHacer = true;
                        banderaMintras = true;
                        //TODO: handle exception
                    }
                    break;
                case "cadena":
                    try {
                        variable = buscarVariable(aux, 2);
                        if (variable == true) {
                            valor1 = posicionId;
                            if (listaTipoDato.get(valor1).equals("cadena")) {
                                valorS1 = (String) listaValor.get(valor1);
                                pilaSemantico.pop(); //eliminar valor1
                            } else {
                                //                                    System.out.println("Tipo de Dato Incorrecto " + aux);//error fatalErrol
                                ptCliente.append("Tipo de Dato Incorrecto " + aux);
                                ptCliente.append(System.getProperty("line.separator"));

                            }
                        } else {
                            valorS1 = pilaSemantico.pop(); //eliminar valor1
                        }
                        operadorAritmetico = pilaSemantico.pop(); //elimiar operadorAritmetico;
                        aux = pilaSemantico.peek();
                        variable = buscarVariable(aux, 2);
                        if (variable == true) {
                            valor2 = posicionId;
                            if (listaTipoDato.get(valor2).equals("entero")) {
                                valorS2 = (String) listaValor.get(valor2);
                                pilaSemantico.pop(); //eliminar valor2
                            } else {
                                //                                    System.out.println("Tipo de Dato Incorrecto " + aux);//error fatalErrol
                                ptCliente.append("Tipo de Dato Incorrecto " + aux);
                                ptCliente.append(System.getProperty("line.separator"));
                            }
                        } else {
                            valorS2 = pilaSemantico.pop(); //eliminar valor2
                        }
                        asignarS(valorVariable, valorS1, operadorAritmetico, valorS2);
                    } catch (Exception e) {
                        //TODO: handle exception
                    }
                    break;

                default:
                    break;
            }
            aux = pilaSemantico.peek();
        }
        pilaSemantico.pop(); //eliminar ;
        // asignar();
    }

 
    private static void asignarE(int posicionVariableEditar, int valor1, String opA, int valor2) {
        switch (opA) {
            case "+":
                int newValor;
                    newValor = valor1 + valor2;
                    listaValor.set(posicionVariableEditar, newValor);
            break;
            case "-" :
                int newValor2;
                    newValor2 = valor1 - valor2;
                    listaValor.set(posicionVariableEditar, newValor2);
            break;
            case "*" :
                int newValor3;
                    newValor3 = valor1 * valor2;
                    listaValor.set(posicionVariableEditar, newValor3);
            
            break;
            case "/":
                int newValor4;
                    newValor4 = valor1 / valor2;
                    listaValor.set(posicionVariableEditar, newValor4);
            
            break;
            default:
                break;
        }
    }

    private static void asignarF(int posicionVariableEditar, float valor1, String opA, float valor2) {
        switch (opA) {
            case "+":
                float newValor;
                    newValor = valor1 + valor2;
                    listaValor.set(posicionVariableEditar, newValor);
            break;
            case "-" :
                float newValor2;
                    newValor2 = valor1 - valor2;
                    listaValor.set(posicionVariableEditar, newValor2);
            break;
            case "*" :
                float newValor3;
                    newValor3 = valor1 * valor2;
                    listaValor.set(posicionVariableEditar, newValor3);
            
            break;
            case "/":
                float newValor4;
                    newValor4 = valor1 / valor2;
                    listaValor.set(posicionVariableEditar, newValor4);
            
            break;
            default:
                break;
        }
    }

    private static void asignarS(int posicionVariableEditar, String valor1, String opA, String valor2) {
        switch (opA) {
            case "+":
                String newValor;
                    newValor = valor1 + valor2;
                    listaValor.set(posicionVariableEditar, newValor);
            break;
            
        }
    }

    private void leerEntrada() {
        String aux = "";
        Scanner sc = new Scanner(System.in);
        boolean variable;
            aux = pilaSemantico.pop();
            variable = buscarVariable(aux,2);//eliminar variable a leer
                if (variable == true) {
                   try {
                    switch (listaTipoDato.get(posicionId)) {
                        case "entero":
                        int e;
                            e = sc.nextInt();
                            listaValor.set(posicionId, e);
                        break;
                        case "entero2":
                        float d;
                             d = sc.nextFloat();
                             listaValor.set(posicionId, d);
                        break;
                        case "cadena":
                        String c;
                             c = sc.nextLine();
                             listaValor.set(posicionId, c);
                        break;
                    
                        default:
                            break;
                    } 
                    pilaSemantico.pop();//eliminar ;
                   } catch (Exception e) {
//                       System.out.println("El Valor Asignado no es Correcto");//error fatalErrol
                       ptCliente.append("El Valor Asignado no es Correcto");
                       ptCliente.append(System.getProperty("line.separator"));
                        banderaHacer = true;
                        banderaMintras = true;
                       //TODO: handle exception
                   }
                }else{
                    pilaSemantico.pop();//eliminar ;
//                    System.out.println("No se puede leer la Variable, por que no esta Declarada: " + "' " + aux + " '");//fatalErrol
                    ptCliente.append("No se puede leer la Variable, por que no esta Declarada: " + "' " + aux + " '");
                    ptCliente.append(System.getProperty("line.separator"));
                    banderaHacer = true;
                    banderaMintras = true;
                }
    }

    private void mostrarPantalla() {
        //String[] cadenaMostrarPantalla;
        String aux, temp;
        int x ;
        boolean variable;
        aux = pilaSemantico.peek();
        switch (aux) {
            case "'":
                    pilaSemantico.pop();
                aux = pilaSemantico.peek();
                while (!aux.equals("'")) {
                pilaSemantico.pop();
//                  System.out.print(aux + " ");
                  ptCliente.append(aux + " ");
                  aux = pilaSemantico.peek();  
                }
//                System.out.println();
                ptCliente.append(System.getProperty("line.separator"));
                pilaSemantico.pop(); //eliminar ' de cierre;
                pilaSemantico.pop();//eliminar ;
            break;
            default:
                aux = pilaSemantico.pop();//eliminar variable a imprimir
                // System.out.println("var po mstra" + aux);
                variable = buscarVariable(aux,2);
                if (variable == true) {
                    x =  (int) listaValor.get(posicionId);
                    temp = String.valueOf(x);
//                    System.out.println(temp + " --->" + x);
//                    ptCliente.append((String) listaValor.get(posicionId));
                    ptCliente.append(temp);
                    ptCliente.append(System.getProperty("line.separator"));
                }else{
//                    System.out.println("Variable no Declarada: " + "' "+ aux + " '"); //fatalErrol
                    ptCliente.append("Variable no Declarada: " + "' "+ aux + " '");
                    ptCliente.append(System.getProperty("line.separator"));
                    banderaHacer = true;
                    banderaMintras = true;
                    break;
                }
                pilaSemantico.pop();//eliminar ;
            break;
        }
    }

    private static String declarId(){ //nM = 1; numero de metodo que solicitan a buscarVariable
        String tipoDato;
        boolean banderaDeclarar = false;//errores generales
        tipoDato = pilaSemantico.pop();//dato dato variable
//         System.out.println("valor a tipo a declara: " + tipoDato);
        while ( banderaDeclarar != true && !tipoDato.equals("mientras") && !tipoDato.equals("hacer") ) {
            numeroVarible ++;
            // System.out.println("valor a tipo a declara: " + tipoDato);
            
            if (tipoDato.equals("entero") ) {
                listaTipoDato.add(tipoDato);// agregar tipo de dato
                banderaDeclarar = buscarVariable(pilaSemantico.pop(),1);// listaId.add(pilaSemantico.pop()); // agregar id buscarVariable();
                    pilaSemantico.pop(); // eliminar =
                int x = Integer.parseInt(pilaSemantico.pop());
                listaValor.add(x); // agregar valor ;
                    pilaSemantico.pop(); // eliminar ;
                tipoDato = pilaSemantico.pop(); // obtener el tipo de dato de la siguiente declaracion o PalabraReservadad
            } else {
                errorGeneral = "Tipo de dato no es correcto; Introduzca dato tipo 'entero' ";
                banderaDeclarar = true;
            }
        }
        // System.out.println("numero var: "+ numeroVarible );
        numeroVarible = numeroVarible * 5;
        fatalErrol = banderaDeclarar;
        return tipoDato;
    }
    
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea ptCliente;
    // End of variables declaration//GEN-END:variables
}
